/*

FstPathFinder.cpp

traverses an fst and prints out all of the paths in that fst along with the costs.

output format is: WORD cost X.XX

where WORD is a sequence of characters accepted or generated by the fst AND X.XX 
is a floating point value representing the cost of traversing that structure.

author: chris taylor

OpenFst forum post title: "Natural code for printing all strings accepted by an FST?"
OpenFst forum post link: http://openfst.cs.nyu.edu/twiki/bin/view/Forum/FstForum#Natural_code_for_printing_all_st

----------------

2011-04-07: Modified by Josef Novak 

Modified to build a 'paths' object to store the individual paths
and associated weights, rather than just print them out from 
inside the class.  Useful if you want to return the paths for further
processing.

*/

#include "FstPathFinder.hpp"

void FstPathFinder::findAllStrings(StdVectorFst& fst, SymbolTable& st, string& seqToSkip, ProjectionEnum printInputOrOutput) {
  vector<string> path;
  TropicalWeight tw(TropicalWeight::One());
  findAllStringsHelper(fst, st, fst.Start(), path, tw, seqToSkip, printInputOrOutput);
}

void FstPathFinder::findAllStringsHelper(StdVectorFst& fst, SymbolTable& st, int state, vector<string>& path, TropicalWeight cost, string& seqToSkip, ProjectionEnum printInputOrOutput) {
  if(fst.Final(state) != TropicalWeight::Zero()) {
    PathData pdata;
    pdata.path     = path;
    pdata.pathcost = (Times(cost,fst.Final(state)));
    paths.push_back(pdata);
    path.clear();
    return;
  }

  for(ArcIterator< StdVectorFst > iter(fst,state); !iter.Done(); iter.Next()) {
    StdArc arc = iter.Value();

    string symbol = (printInputOrOutput) == FstPathFinder::PROJECT_INPUT ? st.Find( arc.ilabel ) : st.Find( arc.olabel );

    if( symbol.compare( seqToSkip ) != 0 ) {
      path.push_back(symbol);
    }

    findAllStringsHelper(fst, st, arc.nextstate, path, Times(cost, arc.weight.Value()), seqToSkip, printInputOrOutput);
  }
}


